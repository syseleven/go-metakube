// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MaintenanceCronJobStatus MaintenanceCronJobStatus represents the current state of a maintenance cron job.
//
// swagger:model MaintenanceCronJobStatus
type MaintenanceCronJobStatus struct {

	// A list of pointers to currently running maintenance jobs.
	// +optional
	Active []*ObjectReference `json:"active"`

	// Information when was the last time the maintenance job was successfully scheduled.
	// +optional
	LastScheduleTime string `json:"lastScheduleTime,omitempty"`

	// Information when was the last time the maintenance job successfully completed.
	// +optional
	LastSuccessfulTime string `json:"lastSuccessfulTime,omitempty"`
}

// Validate validates this maintenance cron job status
func (m *MaintenanceCronJobStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MaintenanceCronJobStatus) validateActive(formats strfmt.Registry) error {
	if swag.IsZero(m.Active) { // not required
		return nil
	}

	for i := 0; i < len(m.Active); i++ {
		if swag.IsZero(m.Active[i]) { // not required
			continue
		}

		if m.Active[i] != nil {
			if err := m.Active[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("active" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("active" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this maintenance cron job status based on the context it is used
func (m *MaintenanceCronJobStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MaintenanceCronJobStatus) contextValidateActive(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Active); i++ {

		if m.Active[i] != nil {
			if err := m.Active[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("active" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("active" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MaintenanceCronJobStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MaintenanceCronJobStatus) UnmarshalBinary(b []byte) error {
	var res MaintenanceCronJobStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
